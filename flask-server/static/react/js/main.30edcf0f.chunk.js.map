{"version":3,"sources":["LightOnTime.js","test.js","CurrentTemp.js","WaterLevel.js","MoistureLevel.js","LightLevel.js","PlantSettings.js","PlantTitle.js","App.js","serviceWorker.js","index.js"],"names":["LightOnTime","React","Component","props","state","time","axios","get","then","response","data","setState","className","this","CurrentTemp","temp","WaterLevel","updateLevel","waterLevel","water","MoistureLevel","moist","moisture","LightLevel","light","WaterFilled","OverlayTrigger","placement","delay","show","hide","overlay","renderTooltip","Button","variant","onClick","put","Obj","window","location","reload","Popup","useState","setShow","handleClose","Modal","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","as","onChange","e","type","target","value","placeholder","name","Footer","renderTooltipPlant","post","console","log","catch","error","Tooltip","PlantSettings","PlantTitle","plantTime","moment","unix","fromNow","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"js/main.30edcf0f.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios'\n\nclass LightOnTime extends React.Component {\n    constructor(props) {\n        super(props);     \n        this.state = {\n            time: \"\"\n        };\n    }\n    \n    componentDidMount() {\n        axios.get('/back/light24').then(response => response.data)\n            .then((data) => {\n                this.setState({ time: data.time })\n        })\n    }\n    \n    render() {\n        return (\n            <div className=\"App-light-on\">\n                <h3>Yesterday light usage:</h3>\n                <h4>{this.state.time} min</h4>\n            </div>\n            \n        );\n    }\n}\n\nexport default LightOnTime;","import React from 'react';\nimport axios from 'axios'\n\nclass Test extends React.Component {\n    constructor(props) {\n        super(props);     \n        this.state = {\n            message: \"\"\n        };\n    }\n    \n    componentDidMount() {\n        axios.get('/test').then(response => response.data)\n            .then((data) => {\n                this.setState({ message: data.thing })\n        })\n    }\n    \n    render() {\n        return (\n            <div className=\"App-test\">\n                <h3>\n                    {this.state.message}\n                </h3>\n            </div>\n            \n        );\n    }\n}\n\nexport default Test;","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nclass CurrentTemp extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            temp: \"\"\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('/back/temp').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ temp: data.temp })\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App-temp\">\r\n                <h3>Current Temperature:</h3>\r\n                <h4>{this.state.temp} fahrenheit</h4>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CurrentTemp;","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nclass WaterLevel extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            waterLevel: \"\"\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('/back/waterLeft').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ waterLevel: data.water })\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App-Water-Level\">\r\n                <h3>Water Level:</h3>\r\n                <h4>{this.state.waterLevel}%</h4>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n    \r\n    updateLevel = () => {\r\n        this.setState.waterLevel = \"lol\"\r\n    }\r\n}\r\n\r\nexport default WaterLevel;","import React from 'react';\r\nimport axios from 'axios'\r\n\r\nclass MoistureLevel extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            moist: \"\"\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('/back/moisture').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ moist: data.moisture })\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App-Moisture-Level\">\r\n                <h3>Moisture Level:</h3>\r\n                <h4>{this.state.moist}%</h4>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default MoistureLevel;","import React from 'react';\nimport axios from 'axios'\n\nclass LightLevel extends React.Component {\n    constructor(props) {\n        super(props);     \n        this.state = {\n            light: \"\"\n        };\n    }\n    \n    componentDidMount() {\n        axios.get('/back/light').then(response => response.data)\n            .then((data) => {\n                this.setState({ light: data.light })\n        })\n    }\n    \n    render() {\n        return (\n            <div className=\"App-Light-Level\">\n                <h3>IR Level:</h3>\n                <h4>{this.state.light} Micrometers</h4>\n            </div>\n            \n        );\n    }\n}\n\nexport default LightLevel;","import React from 'react';\r\nimport axios from 'axios';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport ModalDialog from 'react-bootstrap/ModalDialog';\r\nimport ModalHeader from 'react-bootstrap/ModalHeader';\r\nimport ModalTitle from 'react-bootstrap/ModalTitle';\r\nimport ModalBody from 'react-bootstrap/ModalBody';\r\nimport ModalFooter from 'react-bootstrap/ModalFooter';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Overlay from 'react-bootstrap/Overlay';\r\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nclass PlantSettings extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            name: \"\",\r\n            type: \"\"\r\n        }; \r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('/back/getType').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ type: data.type })\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <WaterFilled />\r\n                <br />\r\n                <br />\r\n                <Popup name={this.state.name} type={this.state.type}/>\r\n            </div> \r\n        );\r\n    }\r\n}\r\n\r\nfunction WaterFilled() {\r\n    const handlePress = () => axios.put('/back/resetWater').then(() => \r\n        this.Obj.updateLevel()\r\n    );\r\n    const refresh = () => window.location.reload();\r\n    return (\r\n        <>\r\n            <OverlayTrigger\r\n                placement=\"right\"\r\n                delay={{ show: 250, hide: 400 }}\r\n                overlay={renderTooltip}\r\n            >\r\n                <Button variant=\"primary\" onClick={() => {handlePress(); refresh();}}>\r\n                    Water Filled\r\n                </Button>\r\n            </OverlayTrigger>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Popup(props) {        \r\n    const [show, setShow] = React.useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n    const resetPlant = () =>\r\n        axios.post('/back/newPlant', {\r\n            name: props.name,\r\n            type: props.type\r\n        })\r\n        .then(function (response) {\r\n            console.log(response);\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n    });\r\n    const refresh = () => window.location.reload();\r\n    const handleNameChange = (e) => props.name = e.target.value;\r\n    const handleTypeChange = (e) => props.type = e.target.value;\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"success\" onClick={handleShow}>\r\n                Change Plant\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>New Plant</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form>\r\n                        <Form.Group controlId=\"plantChoice\">\r\n                            <Form.Label>Plant Type</Form.Label>\r\n                            <Form.Control as=\"select\" onChange={handleTypeChange}>\r\n                                <option>Basil</option>\r\n                                <option>Cilantro</option>\r\n                                <option>Rosemary</option>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group controlId=\"plantName\">\r\n                            <Form.Label>Plant Name</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Name\" onChange={handleNameChange}/>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <OverlayTrigger\r\n                        placement=\"right\"\r\n                        delay={{ show: 250, hide: 400 }}\r\n                        overlay={renderTooltipPlant}\r\n                    >\r\n                        <Button variant=\"primary\" onClick={() => {resetPlant(); handleClose(); refresh();}}>\r\n                            Save New Plant\r\n                        </Button>\r\n                    </OverlayTrigger>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction renderTooltipPlant(props) {\r\n  return <Tooltip {...props}>Will setup a new plant</Tooltip>;\r\n}\r\n\r\nfunction renderTooltip(props) {\r\n  return <Tooltip {...props}>Will reset the water level to full</Tooltip>;\r\n}\r\n\r\nexport default PlantSettings;","import React from 'react';\r\nimport axios from 'axios'\r\nimport moment from 'moment';\r\n\r\nclass PlantTitle extends React.Component {\r\n    constructor(props) {\r\n        super(props);     \r\n        this.state = {\r\n            name: \"\",\r\n            plantTime: \"\",\r\n            time: \"\"\r\n        };\r\n    }\r\n    \r\n    componentDidMount() {\r\n        axios.get('/back/getName').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ name: data.name })\r\n        })\r\n        axios.get('/back/getPlantTime').then(response => response.data)\r\n            .then((data) => {\r\n                this.setState({ \r\n                    plantTime: moment.unix(data.time)\r\n                })\r\n            })\r\n            .then(() => {\r\n                this.setState({\r\n                    time: this.state.plantTime.fromNow()\r\n                })\r\n            })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App-plant-name\">\r\n                <h2>{this.state.name}'s Info</h2>\r\n                <h3>{this.state.name} was planted {this.state.time}</h3>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default PlantTitle;","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Test from './test';\nimport LightOnTime from './LightOnTime';\nimport CurrentTemp from './CurrentTemp';\nimport WaterLevel from './WaterLevel';\nimport MoistureLevel from './MoistureLevel';\nimport LightLevel from './LightLevel';\nimport PlantSettings from './PlantSettings';\nimport PlantTitle from './PlantTitle';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <h1>Smart Flower Pot</h1>\n            <PlantTitle />\n            <MoistureLevel></MoistureLevel>\n            <LightLevel></LightLevel>\n            <br />\n            <h2>Flower Pot Info</h2>\n            <WaterLevel></WaterLevel>\n            <CurrentTemp></CurrentTemp>\n            <LightOnTime></LightOnTime>\n            <PlantSettings></PlantSettings>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}